// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`.not.toBeArrayOfSize fails when given an array of size 0 1`] = `
"<dim>expect(</intensity><red>received</color><dim>).not.toBeArrayOfSize(</intensity><green>expected</color><dim>)</intensity>

Expected value to not be an array of size:
  <green>0</color>
Received:
  value: <red>[]</color>
  length: <red>0</color>"
`;

exports[`.toBeArrayOfSize fails when given neither a parameter nor an array 1`] = `
"<dim>expect(</intensity><red>received</color><dim>).toBeArrayOfSize(</intensity><green>expected</color><dim>)</intensity>

Expected value to be an array of size:
  <green>undefined</color>
Received:
  value: <red>[]</color>
  length: <red>0</color>"
`;

exports[`.toBeArrayOfSize fails when given type of () => {} which is not an array 1`] = `
"<dim>expect(</intensity><red>received</color><dim>).toBeArrayOfSize(</intensity><green>expected</color><dim>)</intensity>

Expected value to be an array of size:
  <green>1</color>
Received:
  value: <red>[Function anonymous]</color>
  length: <red>0</color>"
`;

exports[`.toBeArrayOfSize fails when given type of {} which is not an array 1`] = `
"<dim>expect(</intensity><red>received</color><dim>).toBeArrayOfSize(</intensity><green>expected</color><dim>)</intensity>

Expected value to be an array of size:
  <green>1</color>
Received:
  value: <red>{}</color>
  length: <red>"Not Accessible"</color>"
`;

exports[`.toBeArrayOfSize fails when given type of 0 which is not an array 1`] = `
"<dim>expect(</intensity><red>received</color><dim>).toBeArrayOfSize(</intensity><green>expected</color><dim>)</intensity>

Expected value to be an array of size:
  <green>1</color>
Received:
  value: <red>0</color>
  length: <red>"Not Accessible"</color>"
`;

exports[`.toBeArrayOfSize fails when given type of NaN which is not an array 1`] = `
"<dim>expect(</intensity><red>received</color><dim>).toBeArrayOfSize(</intensity><green>expected</color><dim>)</intensity>

Expected value to be an array of size:
  <green>1</color>
Received:
  value: <red>NaN</color>
  length: <red>"Not Accessible"</color>"
`;

exports[`.toBeArrayOfSize fails when given type of false which is not an array 1`] = `
"<dim>expect(</intensity><red>received</color><dim>).toBeArrayOfSize(</intensity><green>expected</color><dim>)</intensity>

Expected value to be an array of size:
  <green>1</color>
Received:
  value: <red>false</color>
  length: <red>"Not Accessible"</color>"
`;

exports[`.toBeArrayOfSize fails when given type of null which is not an array 1`] = `
"<dim>expect(</intensity><red>received</color><dim>).toBeArrayOfSize(</intensity><green>expected</color><dim>)</intensity>

Expected value to be an array of size:
  <green>1</color>
Received:
  value: <red>null</color>
  length: <red>"Not Accessible"</color>"
`;

exports[`.toBeArrayOfSize fails when given type of true which is not an array 1`] = `
"<dim>expect(</intensity><red>received</color><dim>).toBeArrayOfSize(</intensity><green>expected</color><dim>)</intensity>

Expected value to be an array of size:
  <green>1</color>
Received:
  value: <red>true</color>
  length: <red>"Not Accessible"</color>"
`;

exports[`.toBeArrayOfSize fails when given type of undefined which is not an array 1`] = `
"<dim>expect(</intensity><red>received</color><dim>).toBeArrayOfSize(</intensity><green>expected</color><dim>)</intensity>

Expected value to be an array of size:
  <green>1</color>
Received:
  value: <red>undefined</color>
  length: <red>"Not Accessible"</color>"
`;

exports[`.toBeArrayOfSize fails when given type which is not an array 1`] = `
"<dim>expect(</intensity><red>received</color><dim>).toBeArrayOfSize(</intensity><green>expected</color><dim>)</intensity>

Expected value to be an array of size:
  <green>1</color>
Received:
  value: <red>false</color>
  length: <red>"Not Accessible"</color>"
`;

exports[`.toBeArrayOfSize fails when not given a parameter 1`] = `
"<dim>expect(</intensity><red>received</color><dim>).toBeArrayOfSize(</intensity><green>expected</color><dim>)</intensity>

Expected value to be an array of size:
  <green>undefined</color>
Received:
  value: <red>[1]</color>
  length: <red>1</color>"
`;

exports[`.toBeArrayOfSize fails when not given an array 1`] = `
"<dim>expect(</intensity><red>received</color><dim>).toBeArrayOfSize(</intensity><green>expected</color><dim>)</intensity>

Expected value to be an array of size:
  <green>5</color>
Received:
  value: <red>undefined</color>
  length: <red>"Not Accessible"</color>"
`;
