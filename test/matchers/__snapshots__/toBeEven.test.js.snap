// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`.not.toBeEven > fails when given an even number 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).not.toBeEven()[22m

Expected value to not be an even number received:
 [31m2[39m"
`;

exports[`.toBeEven > fails when not given an even number 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).toBeEven()[22m

Expected value to be an even number received:
 [31mfalse[39m"
`;

exports[`.toBeEven > fails when not given an even number 2`] = `
"[2mexpect([22m[31mreceived[39m[2m).toBeEven()[22m

Expected value to be an even number received:
 [31mtrue[39m"
`;

exports[`.toBeEven > fails when not given an even number 3`] = `
"[2mexpect([22m[31mreceived[39m[2m).toBeEven()[22m

Expected value to be an even number received:
 [31m\\"\\"[39m"
`;

exports[`.toBeEven > fails when not given an even number 4`] = `
"[2mexpect([22m[31mreceived[39m[2m).toBeEven()[22m

Expected value to be an even number received:
 [31m1[39m"
`;

exports[`.toBeEven > fails when not given an even number 5`] = `
"[2mexpect([22m[31mreceived[39m[2m).toBeEven()[22m

Expected value to be an even number received:
 [31mObject {}[39m"
`;

exports[`.toBeEven > fails when not given an even number 6`] = `
"[2mexpect([22m[31mreceived[39m[2m).toBeEven()[22m

Expected value to be an even number received:
 [31m[Function anonymous][39m"
`;

exports[`.toBeEven > fails when not given an even number 7`] = `
"[2mexpect([22m[31mreceived[39m[2m).toBeEven()[22m

Expected value to be an even number received:
 [31mundefined[39m"
`;

exports[`.toBeEven > fails when not given an even number 8`] = `
"[2mexpect([22m[31mreceived[39m[2m).toBeEven()[22m

Expected value to be an even number received:
 [31mnull[39m"
`;

exports[`.toBeEven > fails when not given an even number 9`] = `
"[2mexpect([22m[31mreceived[39m[2m).toBeEven()[22m

Expected value to be an even number received:
 [31mNaN[39m"
`;
