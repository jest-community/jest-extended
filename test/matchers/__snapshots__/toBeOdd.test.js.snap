// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`.not.toBeOdd > fails when given an odd number 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).not.toBeOdd()[22m

Expected value to not be odd received:
  [31m1[39m"
`;

exports[`.toBeOdd > fails when given not given an odd number 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).toBeOdd()[22m

Expected value to be odd received:
  [31mfalse[39m"
`;

exports[`.toBeOdd > fails when given not given an odd number 2`] = `
"[2mexpect([22m[31mreceived[39m[2m).toBeOdd()[22m

Expected value to be odd received:
  [31mtrue[39m"
`;

exports[`.toBeOdd > fails when given not given an odd number 3`] = `
"[2mexpect([22m[31mreceived[39m[2m).toBeOdd()[22m

Expected value to be odd received:
  [31m\\"\\"[39m"
`;

exports[`.toBeOdd > fails when given not given an odd number 4`] = `
"[2mexpect([22m[31mreceived[39m[2m).toBeOdd()[22m

Expected value to be odd received:
  [31m2[39m"
`;

exports[`.toBeOdd > fails when given not given an odd number 5`] = `
"[2mexpect([22m[31mreceived[39m[2m).toBeOdd()[22m

Expected value to be odd received:
  [31mObject {}[39m"
`;

exports[`.toBeOdd > fails when given not given an odd number 6`] = `
"[2mexpect([22m[31mreceived[39m[2m).toBeOdd()[22m

Expected value to be odd received:
  [31m[Function anonymous][39m"
`;

exports[`.toBeOdd > fails when given not given an odd number 7`] = `
"[2mexpect([22m[31mreceived[39m[2m).toBeOdd()[22m

Expected value to be odd received:
  [31mundefined[39m"
`;

exports[`.toBeOdd > fails when given not given an odd number 8`] = `
"[2mexpect([22m[31mreceived[39m[2m).toBeOdd()[22m

Expected value to be odd received:
  [31mnull[39m"
`;

exports[`.toBeOdd > fails when given not given an odd number 9`] = `
"[2mexpect([22m[31mreceived[39m[2m).toBeOdd()[22m

Expected value to be odd received:
  [31mNaN[39m"
`;
